name: Codex Auto-Fix

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-fix:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/codex-fix')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '/codex-fix')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '/codex-fix'))
    runs-on: ubuntu-latest
    steps:
      - name: Extract context and prompt
        id: context
        run: |
          # Determine Issue/PR Number
          ISSUE_NUMBER=""
          COMMENT_BODY=""
          REQUEST_URL=""
          BASE_BRANCH=""

          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            COMMENT_BODY="${{ github.event.comment.body }}"
            REQUEST_URL="${{ github.event.comment.html_url }}"
            if [ -n "${{ github.event.issue.pull_request }}" ]; then
              # Issue comment is on a PR
              BASE_BRANCH=$(jq -r .issue.pull_request.base.ref "$GITHUB_EVENT_PATH")
            fi
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            ISSUE_NUMBER="${{ github.event.pull_request.number }}"
            COMMENT_BODY="${{ github.event.comment.body }}"
            REQUEST_URL="${{ github.event.comment.html_url }}"
            BASE_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            ISSUE_NUMBER="${{ github.event.pull_request.number }}"
            COMMENT_BODY="${{ github.event.review.body }}"
            REQUEST_URL="${{ github.event.review.html_url }}"
            BASE_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")
          fi
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

          # Extract Prompt from comment/review body (removing the command itself and trimming)
          PROMPT=$(echo "$COMMENT_BODY" | sed 's|/codex-fix||' | xargs)
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          echo "request_url=$REQUEST_URL" >> $GITHUB_OUTPUT

          # Determine base branch if not already set (e.g., for issue comment on an issue, not PR)
          if [ -z "$BASE_BRANCH" ] || [ "$BASE_BRANCH" == "null" ]; then
            BASE_BRANCH=$(jq -r .repository.default_branch "$GITHUB_EVENT_PATH")
          fi
          if [ -z "$BASE_BRANCH" ]; then
            BASE_BRANCH="main" # Fallback default
          fi
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

      - name: Comment on issue with start message
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }} # Use standard token
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.context.outputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Running Codex to fix... [Workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).\nPrompt: \`${{ steps.context.outputs.prompt }}\``
            });

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.context.outputs.base_branch }} # Checkout the base branch

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or the version required by codex

      - name: Install Codex CLI
        run: npm install -g @openai/codex

      - name: Run Codex
        run: |
          echo "Running codex with prompt: ${{ steps.context.outputs.prompt }}"
          # Run codex in non-interactive mode, automatically applying edits
          codex -a auto-edit --quiet "${{ steps.context.outputs.prompt }}"
        env:
          # Use the standard OPENAI_API_KEY env var expected by codex
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }} # Ensure this secret exists in your repository settings

      - name: Create Pull Request with changes
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ github.token }} # Use standard token
          commit-message: "fix: Apply automated changes by Codex"
          title: "Automated fix for #${{ steps.context.outputs.issue_number }} by Codex"
          body: |
            This PR was automatically generated by the Codex GitHub Action in response to [this request](${{ steps.context.outputs.request_url }}).

            Prompt: `${{ steps.context.outputs.prompt }}`

            Fixes #${{ steps.context.outputs.issue_number }}
          branch: codex-fix-${{ steps.context.outputs.issue_number }}-${{ github.run_id }}
          base: ${{ steps.context.outputs.base_branch }}
          delete-branch: true
          labels: codex-autofix, automated pr
          assignees: ${{ github.actor }}
